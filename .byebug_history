exit
exi
item
exit
n
File.read(file)
exit
Country.where.not(attribute[:attribute_name].to_sym => nil).count
Country.where.not(attribute[:attribute_name].to_sym => nil)
attribute[:attribute_name] => nil?
Country.where.not(attribute[:attribute_name].to_sym: nil?)
Country.where.not(attribute[:attribute_name].to_sym : nil?)
attribute[:attribute_name]
attribute.file
attribute
exit
continue
country[attribute_name.to_sym]
item[json_name.to_sym].to_f
country
n
Country.columns_hash[attribute_name].type
attribute_name
exit
c
country[attribute_name.to_sym] = item[json_name.to_sym]
n
Country.columns_hash[attribute_name].type
n
country
item[:country]
exit
item[json_name.to_sym]
country[attribute_name.to_sym] = item[json_name.to_sym]
country[attribute_name.to_sym]
country
exit
attribute_name
Country.find_by(name: item[:country])
)
Country.find_by(name: item[:country]
item[:country]
item
exit
Country.find_by(name: json[12][:country])
Country.find(name: json[12][:country])
json.find{|i| i[:country] == "Laos"}
country.name
json.find{|i| i[:country] == country.name}
country.name
json.find{|i| i[:country] == "Sri Lanka"}
json.find{|i| item[:country] == "Sri Lanka"}
json.find{|i| item["country"] == "Sri Lanka"}
json.find{|i| item[:country] == "Sri Lanka"}
item[:country]
item = json[0]
json[0]
json.find{|item|}
json.find {|item| item[:country] == country.name}
continue
exit
json[0]
json
json.find{|item| item[:country] == "Macedonia"}
json.find {|item| item[:country] == "Macedonia"}
country.name
json.find {|item| item[:country] == country.name}
json.find {|item| item[symbol_name.to_sym] == country.name}
country.name
item
json[0][symbol_name.to_sym]
symbol_name.to_sym
json[0]
json
json.find{|item| item[symbol_name.to_sym] == country.name}
json.find {|item| item[symbol_name.to_sym] == country.name}
country.save!
country.name = "Kazakhstan"
country.name = Kazakhstan
country
continue
country
continue
country.name
continue
json.find {|item| item[symbol_name.to_sym] == country.name}
country.name
continue
country.name
attribute = json.find {|item| item[symbol_name.to_sym] == country.name}
continue
exit
n
s
n
continue
n
json
n
countries
n
attribute_name.to_sym
attribute_name
exit
Country.last
continue
exit
json.find {|item| item[:country] == country.name}
country.name
country.abbreviation = json.find {|item| item[:country] == country.name}[:abbreviation]
country
exit
n
countries
n
continue
n
json
n
file
n
exit
json = JSON.parse(file, opts = {symbolize_names: true})
country.name
country = Country.first
Country.first
abbreviation = json.find {|item| item[:country] == 'Aruba'}[:abbreviation]
abbreviation = json.find {|item| item[:country] == 'Aruba'}
country[:abbreviation]
country.country
country = json[0]
json[0].country
json[0][:country]
json
json = JSON.parse(file, opts = {symbolize_names: true})
json = JSON.parse(file, opts = {symbolize_names : true})
json = JSON.parse(file, {symbolize_names : true})
json["Aruba"]
json[0].first
json[0]
json[0].country
json[0][:country]
json[0]
json.where(country: "Zimbabwe")
json
json = JSON.parse(file)
file = File.read('db/country-json/country-by-abbreviation.json')
File.read('db/country-json/country-by-abbreviation.json')
File.read('country-json/country-by-abbreviation.json')
require 'json'
require json
exit
continent
country[:country]
country
exit
country[:currency_name]
country
continue
exit
has_been
priority
continue
destination_params
continue
next
params[:destination][:has_been]
next
params[:destination][:has_been] == "true" ? true : has_been
next
params[:destination][:has_been].nil?
next
params[:destination][:priority].nil?
next
@destination
params
exit
params
has_been
priority
